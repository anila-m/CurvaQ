from datetime import datetime
import time
import numpy as np
from miser.MISER import *
from miser.SimpleMonteCarlo import *
from miser.test_functions import *
from BA_preliminary_tests import rosen_projection_to_2d
from scipy.optimize import rosen
from BA_testing_functions import get_ASC_function, CostFunction
from BA_experiment_resources import unitary, unitary_3D


def integrate_cube_MC(func, lowerleft, upperright, N=1000):
    '''
        Integrate function over a cube (with lower left and upper right corners specified) using Naive MC integration.
        Assumption: cube and not rectangular box, i.e. side lengths are the same for every dimension
        Args:
            func (callable): function, 
            lowerleft (list): lower left corner of cube, 
            upperright (list): upper right corner of cube, 
            N (int): number of sample points, default: 1000
        Returns:
            integration result
            elapsed time in seconds
    '''
    start = time.time()
    dim = len(lowerleft)
    if dim != len(upperright):
        raise Exception("wrong dimensions")
    volume = 1
    for i in range(dim):
        side = upperright[i]-lowerleft[i]
        volume *= side
    sample_points = []
    rng = np.random.default_rng()
    sample_points = rng.uniform(low = lowerleft, high = upperright, size = (N, dim))
    fun_values = []
    for point in sample_points:
        fun_values.append(func(point))
    result = np.mean(fun_values)*volume
    elapsed_time = time.time()-start
    return result, np.round(elapsed_time, 3)

def integrate_cube_MISER(func, lowerleft, upperright, N=1000):
    '''
        Integrate function over a cube (with lower left and upper right corners specified) using MISER MC integration.
        Assumption: cube and not rectangular box, i.e. side lengths are the same for every dimension
        Args:
            func (callable): function, 
            lowerleft (list): lower left corner of cube, 
            upperright (list): upper right corner of cube, 
            N (int): number of sample points, default: 1000
        Returns:
            ave: integration result 
            N: number of sample points used
            elapsed time in seconds
    '''
    start = time.time()
    miser_instance = MISER()
    dim = len(lowerleft)
    volume = 1
    for i in range(dim):
        side = upperright[i]-lowerleft[i]
        volume *= side
    ave, var, N = miser_instance.MISER(func,lowerleft, upperright, N=N, dith=0)
    #miser_result = ave*volume
    elapsed_time = time.time()-start
    return ave, N, np.round(elapsed_time, 3)

def compare_Miser_with_MC_TASC(func, lowerleft, upperright, N=1000, title="func", file_title="func"):
    '''
        Comparison of TASC of function func within a hypercube when intergral is computed with regular Monte Carlo
        or MISER. Hypercube is given by a lower left corner and upper right corner.
        Args: 
            func (callable): function, 
            lowerleft (list): lower left corner of cube, 
            upperright (list): upper right corner of cube, 
            N (int): number of samples points, default: 1000, 
            title (String): title of function (for plot title), default: "func", 
            file_title (String): title of function (for plot file), default: "func"
    '''
    absolute_SC = get_ASC_function(func)
    mc_results = []
    times_mc = []
    miser_results = []
    times_miser = []
    Ns_miser = []
    for _ in range(100):
        mc_result, time_mc = integrate_cube_MC(absolute_SC, lowerleft, upperright, N=N)
        miser_result, N_miser, time_miser = integrate_cube_MISER(absolute_SC, lowerleft, upperright, N=N)
        mc_results.append(mc_result)
        times_mc.append(time_mc)
        miser_results.append(miser_result)
        times_miser.append(time_miser)
        Ns_miser.append(N_miser)
    print(f"Total absolute SC of {title}.")
    print(f"Integrated within hypercupe with lowerleft={lowerleft}, upperright={upperright}")
    print(f"Median results over 100 repetitions")
    print(f"regular MC: TASC = {np.median(mc_results)}, N={N}, time (s)= {np.median(times_mc)}")
    print(f"MISER: TASC={np.median(miser_results)}, N={np.median(Ns_miser)}, time (s)= {np.median(times_miser)}")
    print("Naive MC", mc_results)
    print("MISER", miser_results)
    create_miser_boxplots(miser_results, mc_results, file_title, title)


def create_miser_boxplots(miser_results, mc_results, file_title, title):
    '''
        Create Boxplot for MISER experiment (comparison with naive mc)
        Args:
            miser_results (list): list of miser results, 
            mc_results (list): list of naive MC results, 
            file_title (String): title of function for file name, 
            title (String): title of function for plot title
    '''
    # Creating a boxplot for both datasets without outliers
    plt.boxplot([miser_results, mc_results], labels=['MISER', 'Naive MC'], showfliers=False)

    # Adding a title and labels
    # plt.title(f'{title} TASC values within hypercube ([0,...,0] - [2,...,2]).\n 100 computations.')
    plt.title(title, fontsize=16)
    plt.ylabel('TASC', fontsize=14)
    plt.tick_params(axis='x', which='major', labelsize=14)
    plt.tick_params(axis='y', which='major', labelsize=10)

    # Display the plot
    file_name = f"{file_title}_MISER_comparison_noFliers"
    plt.savefig(f"plots/preliminary_tests/MISER/{file_name}.pdf", format='pdf')
    plt.close()
    # Creating a boxplot for both datasets
    plt.boxplot([miser_results, mc_results], labels=['MISER', 'Naive MC'])

    # Adding a title and labels
    #plt.title(f'{title} TASC values within hypercube ([0,...,0] - [2,...,2]).\n 100 computations.')
    plt.title(title, fontsize=16)
    plt.ylabel('TASC', fontsize=14)
    plt.tick_params(axis='x', which='major', labelsize=14)
    plt.tick_params(axis='y', which='major', labelsize=10)

    # Display the plot
    file_name = f"{file_title}_MISER_comparison"
    plt.savefig(f"plots/preliminary_tests/MISER/{file_name}.pdf", format='pdf')
    plt.close()


def miser_test_for_all_test_function():
    '''
        Perform Miser test (comparison between miser and naive MC) 
        for all four test functions (Rosenbrock 3D, rosenbrock 2D reduction, 3D QNN cost, 6D QNN cost)
    '''
    dimensions = [2,3,3,6]
    u_3D = np.asarray(unitary_3D, dtype=complex)
    u_6D = np.asarray(unitary, dtype=complex)
    cost3D = CostFunction(num_qubits=1, unitary=u_3D, s_rank=1, num_data_points=1, data_type=1)
    cost6D = CostFunction(num_qubits=2, unitary=u_6D, s_rank=1, num_data_points=1, data_type=1)
    functions= [rosen_projection_to_2d, rosen, cost3D, cost6D]
    function_names = ["rosen2Dred", "rosen3D", "cost3D", "cost6D"]
    function_titles = ["$rosen(x_1, x_2, 1)$", "$rosen(x_1, x_2, x_3)$", "3D QNN Cost Function", "6D QNN Cost Function"]
    for i in range(2):
        c = np.ones(dimensions[i])
        func = functions[i]
        f_name = function_names[i]
        f_title = function_titles[i]
        dim = dimensions[i]
        low = np.zeros(dim)
        high = np.ones(dim)*2
        print(f_name, datetime.now())
        compare_Miser_with_MC_TASC(func, low, high, N=1000, title=f_title, file_title=f_name)

if __name__=="__main__":
    mc = {"rosen2Dred": [1.0750065007306848, 0.512797396923619, 0.12136432369884141, 0.07798038468150083, 2.0326061412829235, 0.2577553599062751, 0.1276477026630599, 0.05146826619887603, 3.4516875705925787, 0.11111344673721996, 0.7302456845016664, 0.26573338981862754, 1.4826570696115344, 173.56234629193466, 0.1252673910137689, 0.05913173809032331, 0.0897518058908113, 0.06912987236703347, 0.34833707897357263, 0.10552173307640121, 0.09405898138115569, 0.05142340486311601, 1.3650836050934294, 0.1289839313070388, 0.08675221075522267, 0.04159737445511286, 0.3652128509376486, 0.051754924465806304, 0.038852749570695004, 0.5123204683233816, 6.71243366579305, 0.6190500960085525, 0.11027902112887415, 0.31828699981579006, 0.4576327367921792, 0.07838695304403628, 0.06021406267517813, 0.2995996369102417, 0.7808987053925595, 0.1523165429470097, 0.19557185634431012, 0.8868471975569978, 0.06436778991818012, 0.6826505390731827, 1.9384684678785624, 0.6769821639280676, 0.5740269578273224, 0.14388381161322997, 4.885618462591358, 0.04955308999438946, 0.7743128344551642, 0.6924797914322146, 0.08869865998998422, 2.205171179273579, 0.3200252417745435, 0.6657567709160297, 0.3338584453267229, 0.5879796706257572, 2.2850972487363688, 0.23337854681891282, 0.6628065831971973, 0.14280316696495043, 0.0797977819567973, 0.8787226997407385, 0.19340010064247157, 0.04158656142151406, 0.11348509552251516, 0.2758671034021711, 0.9723124356728094, 0.13840347415081022, 0.14216237189563824, 1.0104231128691346, 0.25676096674880444, 0.04494938000124527, 0.5202627150127471, 0.015446415583996283, 0.9743899444620572, 1.7895226622788172, 0.452672051784929, 0.023342415562039455, 0.05604915635404589, 0.2732755145021328, 0.11318377728463275, 0.02766259539822634, 0.04269505956130075, 0.201015969292795, 0.3733116384977208, 5.693677288568759, 0.018131391591118252, 4.042639604906686, 0.021303450439612605, 0.15861853395218423, 0.2233554644671507, 0.33697751901085793, 0.2898373081079268, 1.3179404031984345, 2.2489950954497533, 0.08947149421152423, 0.08973660217565782, 0.9829838146036141],
          "rosen3D":[23.768402520988477, 23.216302564993473, 28.749135370301055, 22.387004295729326, 19.674245270589402, 21.570777371833167, 23.088462789686222, 25.6749521028043, 19.82545165986755, 23.328271571249328, 24.885370980042854, 20.863828992080308, 22.297399088961562, 25.847131445663653, 25.190388992557384, 29.570984021495775, 34.46029186460423, 21.49786942298508, 21.975711802470702, 18.56757384535165, 27.580444709930447, 23.43007651568391, 21.19838326432874, 20.500847827013736, 24.94684853621902, 21.031639492418133, 23.483099805869227, 20.63202279227134, 21.305301078042103, 19.37584079567722, 23.412654426756045, 21.101101711819435, 23.14238857884821, 24.30253361138028, 22.780041844147398, 21.182916614130757, 22.424241575681837, 21.28365446763254, 20.30608541579087, 20.494169130506233, 29.748211114976627, 22.46884263207491, 19.667063791975206, 19.58348741038718, 21.7857639901085, 39.01604832147763, 20.069352066962317, 32.933533939140325, 29.57027186968101, 22.617732853478273, 20.432751246413098, 25.202387946995437, 18.381738460820017, 18.225370119162832, 19.727258893250298, 19.25513423982223, 21.879867357929744, 21.926642252024664, 20.45624703648023, 24.06301048666268, 22.617585420993898, 18.88406328381981, 21.717703882599757, 195.6121260027415, 29.36146287595995, 447.9444715763858, 23.16880355335197, 21.528780599163373, 22.426166220930376, 24.354544326185575, 20.041114685804825, 47.48945630583476, 42.43233242189587, 23.232971438575667, 22.299418300087908, 18.926818133113528, 25.386336844669117, 21.393550259064295, 20.849434262005975, 18.7900209049935, 22.183962043215498, 21.910747761736285, 20.71931203223484, 24.716475932375996, 174.17838175018778, 19.887129698929506, 23.95053128004295, 26.945044442226386, 20.320977319976254, 35.22147765525246, 21.260935741711826, 19.13868893377482, 25.374226328233338, 26.505788659869424, 18.9078104453346, 20.404089505764162, 27.207991241654163, 20.504296409821073, 30.729215128246263, 21.737966524553002],
          "cost3D": [76.33039056784638, 80.34950107970172, 82.10404834666484, 79.3996227313778, 82.59894705987972, 84.31839785870244, 87.07919001300016, 80.08319891911924, 75.00661936189005, 79.60180199399713, 79.53944998310762, 83.58051180870643, 77.68799699284087, 83.3902724907728, 83.50705325544763, 82.03334596545412, 83.65356636199536, 82.455566044236, 79.24668963714771, 83.41370013402697, 81.16328200936914, 83.98356248664952, 83.01280909332002, 84.06082051689717, 82.34274451337772, 84.14573528224383, 74.43150297353586, 77.1469204654576, 77.78665895695262, 82.53299959710948, 81.11797097654865, 81.16038415402429, 80.29094037822675, 76.91091083126774, 85.63229231821425, 79.90788741765438, 81.89498440756459, 79.5471235272641, 84.44112896328129, 87.3320529151566, 77.15266440895078, 83.71395229938942, 77.34918145921381, 79.92860847281757, 83.41504592450893, 83.77899890709637, 80.56775153024869, 87.34861463338642, 81.45811145496064, 87.5770167738501, 80.73284415943235, 83.52091926409162, 82.7710844120036, 81.45334385325195, 79.22491589576428, 79.3015675493193, 77.89456881016729, 80.86990952471396, 78.3487492769511, 81.26373209823376, 78.85584471791098, 84.46037593616064, 87.61582453226059, 77.97533414000401, 81.77884757836097, 80.06083217031055, 76.19569518582847, 85.51554662392402, 82.85784977886702, 80.2668730116361, 80.36867311265559, 83.84339545452583, 82.13289608755366, 82.83238353302981, 83.0900615745528, 84.95995516314352, 87.89004639613896, 81.61072703431401, 81.89940183820727, 83.85834494742086, 79.47095509336307, 84.28876748649616, 80.9737033812075, 82.75896299898936, 85.0064261355083, 81.69690324290778, 85.5815689533412, 80.5058235627014, 80.46194934491768, 82.83972687702806, 82.1510398581963, 84.99956237334756, 80.05565080990625, 84.87259333195031, 82.44474529227288, 81.14606901176852, 86.43249841273769, 79.47411996389265, 82.1861820908051, 79.75329634426139],
          "cost6D":[1771.1026697107711, 1704.901213127511, 1723.327960015659, 1644.9758514182652, 1613.8258469484106, 1584.0552550844307, 1734.0536973574492, 1629.4845143230193, 1712.269741212429, 1708.4452990707507, 1760.1242975814841, 1731.0585014302171, 1673.7083217625527, 1721.9319308405609, 1723.2940443749665, 1773.1139120934308, 1627.1104928257244, 1709.9965745290178, 1753.592851572643, 1684.2620304954014, 1726.3526134621977, 1586.7434754137578, 1676.3338682748754, 1687.8257456411486, 1745.3343690127122, 1612.8442500356011, 1604.4577643134799, 1646.2725014198932, 1625.3365252729604, 1677.252241343798, 1723.7539995306117, 1722.8162385237442, 1678.5213046365384, 1721.0703061726156, 1619.3789268995276, 1668.0396702342039, 1669.1005482152268, 1737.1725487939186, 1571.4212513269106, 1693.4682338237915, 1659.9506180701242, 1774.4790761615925, 1715.0481023796065, 1732.5846885505634, 1707.58249381722, 1632.3081821254711, 1609.0882857501483, 1654.2376097908664, 1733.8254506482751, 1684.5734262880676, 1763.4528409253035, 1713.341582237254, 1611.8356338689682, 1823.092344711082, 1718.7979684436543, 1607.8272463359563, 1726.4762508052918, 1768.2880953851652, 1776.312416048668, 1758.0782441823096, 1765.0866084841402, 1638.6917417229606, 1722.691138019308, 1773.7564427911323, 1722.6123581628078, 1721.5864964263444, 1709.0271227334845, 1678.2447783459043, 1664.1525419014279, 1778.1192174982946, 1644.562034831815, 1714.9959531916609, 1649.3490234518183, 1724.5242360806958, 1739.2257196016121, 1696.8087791918088, 1623.632729608232, 1642.6593882179172, 1780.08545363509, 1761.5711576660074, 1666.8453360017813, 1666.7983561447334, 1695.3312307509518, 1616.4659805368333, 1575.9155217440214, 1724.3526383266808, 1769.0153071355667, 1682.0013046051115, 1738.0579807570589, 1694.1587295490847, 1627.6995132457769, 1622.4587565881675, 1720.2484554560426, 1604.7799260442196, 1598.9938999225099, 1691.4295281996651, 1654.2762299639467, 1598.6341682739785, 1758.9754540145295, 1584.3899542027013]
    }
    miser = {"rosen2Dred": [9.131928651027529, 0.28055660281699385, 0.5060688278382452, 1563.4577421256556, 0.07036767450996086, 1.314161543099205, 0.5538507332429077, 1.823691318243872, 0.4552622446511616, 0.5909242554710596, 0.3183452870357661, 0.38945575580327046, 0.32455255798067256, 0.06627724251318819, 0.14657509392575266, 0.1665026694221285, 0.6468683202633492, 0.24196913055745442, 1.7002453509517945, 1.9496002110218769, 0.490823392323057, 0.5820721389935741, 0.50286247330134, 5.134843494063148, 23.89754812552748, 0.3717963707841271, 0.25287285316722624, 1.2752279223258034, 0.2962258407380299, 0.715664599964698, 0.38497285140563425, 0.4820672933020687, 0.22015737345138292, 0.29540915122172867, 0.219303541790405, 0.4684429464654026, 0.08671701027247852, 0.916881576949746, 1.008903998225154, 5.493586727552881, 0.49990920167883574, 3.7832213331314395, 0.35456829578161136, 4.653497074923209, 0.4168017827388079, 0.2726060225707167, 0.22685895837748093, 0.2833429521767571, 0.35121886483611575, 0.6190946922328427, 0.3390076507623869, 13.492583351508468, 0.32225463524498044, 0.19299988647401844, 0.8378882597231105, 0.3057605646125722, 0.44443668595261665, 0.20358646883655812, 0.4667937585275215, 0.9464553967002738, 1.108461095145972, 0.4992503765791372, 0.574639827045179, 0.7987492524080568, 0.2860163049661201, 8.997896985526651, 0.548340998126764, 1.7245127557723459, 0.3894731175453931, 11.134533309473783, 8.482019913378466, 0.3266841205014804, 0.16194808291222326, 0.19116862090543812, 0.7839716619965006, 20.493887303529917, 0.35824575533368325, 33.53702352897295, 2.8726179371825467, 1.5836413320509402, 0.7199315963926718, 0.8142084214756545, 0.4773726720355042, 0.24453720081103048, 0.11544612784765573, 0.983520485100699, 1.3741330983927285, 2.5159151054922653, 0.6031989473101109, 0.1964470573609693, 0.7463439716107173, 0.685409875763238, 0.9112464146776683, 0.9825139262434757, 0.39360958656720146, 0.06319669478029051, 2.940372027402057, 0.5280998379021946, 1.29546874539121, 0.7220578541358713],
             "rosen3D": [20.507775807816277, 31.88405034529599, 23.1772852884985, 114.8809284626995, 113.9563706168351, 23.55890214831225, 22.585208934923266, 1400.141767956706, 18.700429647329948, 20.4309949924963, 22.686737879398784, 19.583400584864513, 23.706170333352468, 23.70800100174936, 24.825688383204593, 25.48810314001163, 30.857979381398934, 27.40059231719645, 22.936975589345302, 20.864624052048118, 26.588248192037547, 22.842227245958856, 22.733309085723235, 23.562508432282378, 18.210406670329817, 20.236027425418694, 74.4829049927935, 23.188430172790135, 20.147812375478082, 19.791607359960015, 22.43217603426212, 26.958247015947638, 25.157499339651558, 21.73574520998406, 21.114536748595036, 19.237344796811524, 21.335874195478965, 23.29754207121263, 20.609625994866413, 26.664495234313023, 17.845198217321062, 19.67388805668214, 20.191923072913674, 23.510751503447512, 28.563573495580947, 21.451792313108516, 135.7972360111729, 23.537164070747373, 23.624316265410503, 23.731054429528566, 22.919248042638465, 18.071861640081934, 20.429358321931154, 21.027642815248655, 20.20813818993151, 21.10037198469976, 20.65021401784559, 26.6210579282695, 20.965395879852245, 25.581280647172832, 21.520202537490405, 25.897236321109503, 22.903986401445962, 19.358202215341656, 23.631299067410858, 22.707786836187196, 20.62151947606584, 21.236476076955547, 20.526662492790656, 20.4648499373696, 17.527783068529445, 40.86311415722212, 15030.689192080445, 20.32950502225839, 23.0388576715146, 24.345393147497223, 20.28657507367251, 20.62820119491373, 21.26867028188417, 30.124812092152908, 19.065724250520624, 21.92950580809258, 23.18367168036301, 20.231461418401945, 19.688274108686524, 18.740080922625623, 23.59960888086202, 24.028639708355833, 23.02215633103919, 33.48889096791476, 20.730520927931195, 26.94569103051424, 21.75853619498622, 87.6410419491451, 17.94506570717533, 25.25333523032533, 22.80229042994661, 22.55665275880339, 19.844738999232035, 18.877742538231786],
             "cost3D": [86.43167776889453, 78.01101838995281, 80.42449895928821, 78.6465461045343, 82.60431566204964, 88.05497261519017, 78.74640513320475, 79.78944187474724, 80.91710700414164, 80.79921553935661, 80.42145655261291, 79.665595912919, 88.06062670250816, 79.88133020446736, 81.31634538947833, 81.44797204805522, 80.80826663167315, 85.28234635451979, 81.08005902036727, 87.53053561970573, 77.4745668729505, 76.36747690608938, 83.17642083143312, 77.26827270907354, 83.91870508938861, 82.2783487750203, 81.6025719875888, 85.60211153363687, 84.52370700026287, 86.70281913033588, 78.43287376958665, 82.12262754990189, 82.42658036509555, 82.39402427283072, 76.56959374243993, 77.17593046650732, 80.10853855581344, 82.17908672456974, 77.61565429332234, 83.16149690107645, 80.13562935644798, 80.28302650115131, 78.33460780186606, 81.68894695412807, 78.4125910907061, 85.34747842497302, 80.81309866574261, 82.57549699354666, 75.42598597866393, 83.2628315620068, 83.4293774240439, 82.86588354250345, 76.32851445748807, 81.89773257016269, 86.42865816287747, 79.42313731032486, 81.99538887579666, 73.1399168965576, 78.52691820549961, 79.74115259036378, 84.86536889991103, 80.22082971029917, 88.38722898620051, 79.56650460776902, 81.06476118330508, 76.83447999889259, 77.12936867605062, 72.62902592767009, 79.09224715941181, 82.90861959833205, 76.42446533914172, 82.01862953602321, 79.1064376873785, 84.66063924633526, 84.26899358210059, 81.32431016412497, 84.09302747761264, 77.82686158897212, 82.31597185939523, 80.45226660431712, 80.71369832105941, 80.93757694197168, 85.62882329182882, 77.7343531982325, 84.43929224225624, 80.2497447015451, 87.9406118139652, 82.47777217612614, 78.15582137144895, 80.38997759762081, 78.29794151170508, 85.62333195439322, 82.37741719514014, 81.09218322016508, 79.25964405983461, 83.9414021135097, 80.52355233548985, 79.26738478105042, 78.40057711420623, 79.22914062040158],
             "cost6D": [1671.8208711057541, 1639.9930326771535, 1687.305240942712, 1643.7754717957023, 1542.6104215208518, 1666.737755585731, 1757.3078144345868, 1677.5647970051323, 1727.8523804303688, 1621.082505508036, 1749.547545137551, 1777.3169188593968, 1632.938464229769, 1568.8966462614192, 1713.7438379952034, 1643.5686333973508, 1708.78963513242, 1782.707374314793, 1728.5107575487104, 1595.083691259938, 1634.2154430745795, 1510.9275583761391, 1661.937876683246, 1702.722900216106, 1642.6238862754128, 1625.6624829226048, 1700.7966772134812, 1726.348590322275, 1686.1655801646996, 1609.6325847969674, 1744.0496572174065, 1689.962576750513, 1633.1167395355171, 1710.904659833342, 1695.3136829397909, 1674.9347778960127, 1643.1722290957482, 1702.485772291775, 1784.403488462856, 1726.2137916635152, 1697.1318428858774, 1708.9489136181523, 1688.1748850329645, 1691.5784129507817, 1697.5863404574793, 1688.2844483900258, 1572.972614914601, 1690.9320499275468, 1830.0615774746248, 1552.1569590436245, 1733.9820761016335, 1708.2300504694376, 1546.9368003146371, 1724.9300105158702, 1653.966619759811, 1662.9112180688394, 1626.3890612390078, 1654.721585853441, 1631.1673879189793, 1602.1794760761895, 1798.0851308125407, 1704.4441704385208, 1751.0077727190874, 1636.0192178884554, 1680.394819355262, 1545.633226013682, 1921.9785965609854, 1729.5215347559542, 1682.8124183964974, 1722.3069675329757, 1754.0892582589438, 1622.9339193278765, 1660.589941290506, 1662.9578960127544, 1692.7458431170758, 1718.0562176628769, 1690.9496533846523, 1699.8849262068766, 1689.6002388432603, 1736.139158201911, 1678.9849142613018, 1689.388255522351, 1765.7539078805935, 1757.0890034452177, 1684.3984297182787, 1661.3936838391796, 1659.145129393751, 1610.877802969555, 1651.061919223365, 1735.5206866929866, 1661.1628538425143, 1809.527686766026, 1674.4864963745529, 1737.4491912908793, 1734.2118449937666, 1802.1555521442517, 1777.6558898668065, 1667.3100784181918, 1657.2242081926227, 1612.7139503449143]
    }
    function_names = ["rosen2Dred", "rosen3D", "cost3D", "cost6D"]
    function_titles = ["$rosen(x_1, x_2, 1)$", "$rosen(x_1, x_2, x_3)$", "3D QNN Cost Function", "6D QNN Cost Function"]
    for i in range(4):
        f_name = function_names[i]
        f_title = function_titles[i]
        create_miser_boxplots(miser_results=miser[f_name], mc_results=mc[f_name], file_title=f_name, title=f_title)
